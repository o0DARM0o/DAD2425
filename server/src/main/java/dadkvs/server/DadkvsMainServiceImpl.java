package dadkvs.server;

/* these imported classes are generated by the contract */
import dadkvs.DadkvsMain;
import dadkvs.DadkvsMainServiceGrpc;
import dadkvs.DadkvsPaxos.TransactionRecord;
import dadkvs.util.DebugMode;
import io.grpc.stub.StreamObserver;

public class DadkvsMainServiceImpl extends DadkvsMainServiceGrpc.DadkvsMainServiceImplBase {

	DadkvsServerState server_state;
	int                timestamp;
	int                sequenceCounter = 0;
	final PaxosManager paxosManager;
	int                paxosIndex;
	int                currentTimestamp = 0;
	

	private final Object freezeLock = new Object(); // Lock object for freeze/unfreeze mechanism

	public DadkvsMainServiceImpl(DadkvsServerState state, PaxosManager paxosManager) {
		this.server_state = state;
		server_state.mainServiceImpl = this;
		this.timestamp = 0;
		this.paxosManager = paxosManager;
		this.paxosIndex = 0;
	}

	private void checkFreeze() {
		synchronized (freezeLock) {
			while (server_state.new_debug_mode == DebugMode.FREEZE) {
				try {
					System.out.println("Server is in FREEZE mode. Pausing request handling...");
					freezeLock.wait(); // Wait until UN_FREEZE is called
				} catch (InterruptedException e) {
					Thread.currentThread().interrupt(); // Reset thread interrupt status
				}
			}
		}
	}

	private void unfreeze() {
		synchronized (freezeLock) {
			System.out.println("Server is in UN_FREEZE mode. Resuming request handling...");
			freezeLock.notifyAll(); // Notify all waiting threads
		}
	}

	@Override
	public void read(DadkvsMain.ReadRequest request,
			StreamObserver<DadkvsMain.ReadReply> responseObserver) {

	checkFreeze(); // Check if server is frozen before processing the request
	// for debug purposes
	System.out.println("Receiving read request:" + request);

	int reqid = request.getReqid();
	int key = request.getKey();
	VersionedValue vv = this.server_state.store.read(key);
	
	DadkvsMain.ReadReply response =DadkvsMain.ReadReply.newBuilder()
		.setReqid(reqid).setValue(vv.getValue()).setTimestamp(vv.getVersion()).build();

	responseObserver.onNext(response);
	responseObserver.onCompleted();
	}

	@Override
	public void committx(DadkvsMain.CommitRequest request,
			StreamObserver<DadkvsMain.CommitReply> responseObserver) {

		checkFreeze(); // Check if server is frozen before processing the request
	
		if (server_state.i_am_leader.get()) {
			System.out.println(
				"I am the leader and I received a client commit request: " + request);

			final TransactionRecord tr = TransactionRecordUtils.createTransactionRecord(request);
			final int paxos_instance_index = paxosManager.startPaxosInstance(tr);
			if (paxos_instance_index < 0) {
				sendCommitResponse(responseObserver, request, false);
				return;
			}
			final boolean was_commit_successful = paxosManager.waitForCommit(paxos_instance_index);
			sendCommitResponse(responseObserver, request, was_commit_successful);
		}
	}

	// Send the final commit response to the client
	private void sendCommitResponse(StreamObserver<DadkvsMain.CommitReply> responseObserver,
			DadkvsMain.CommitRequest request, boolean result) {

		DadkvsMain.CommitReply response = DadkvsMain.CommitReply.newBuilder()
			.setReqid(request.getReqid())
			.setAck(result)
			.build();

		responseObserver.onNext(response);
		responseObserver.onCompleted();
	}

	// Add an override for `executeDebugMode` to handle unfreezing
	public void executeDebugMode(DebugMode debugMode) {
		if (debugMode == DebugMode.UN_FREEZE) {
			unfreeze(); // Call unfreeze when the mode is set to UN_FREEZE
		}
	}
}
